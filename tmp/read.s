; this code was generated by a tool. assemble with nasm.
bits 64

global malloc
global puts
global nextarg
global main

malloc:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, brk
	push	rax
	mov	rax, 1
	neg	rax
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, brk
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

puts:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	jmp	puts_L1
puts_L0:
	mov	rax, putch
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
puts_L1:
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	test	rax, rax
	jnz	puts_L0
	mov	rax, 0
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

nextarg:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	jmp	nextarg_L1
nextarg_L0:
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
nextarg_L1:
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	test	rax, rax
	jnz	nextarg_L0
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

main:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rsi
	push	rax
	push	rax
	mov	rax, 2
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setl	dl
	mov	rax, rdx
	test	rax, rax
	jz	main_L0
	mov	rax, puts
	push	rax
	jmp	main_L3
main_L2:
	db	"usage: read file ; file "
	db 0
main_L3:
	mov	rax, main_L2
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, putch
	push	rax
	mov	rax, 10
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, exit
	push	rax
	pop	rax
	call	rax
	jmp main_L1
main_L0:
main_L1:
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	push	rax
	mov	rax, malloc
	push	rax
	mov	rax, 1
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	jmp	main_L5
main_L4:
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, nextarg
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, open
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 0
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, 0
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setg	dl
	mov	rax, rdx
	test	rax, rax
	jz	main_L6
	jmp	main_L9
main_L8:
	mov	rax, putch
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	push	rax
	pop	rdi
	pop	rax
	call	rax
main_L9:
	mov	rax, 0
	push	rax
	mov	rax, read
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 1
	push	rax
	pop	rdx
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setg	dl
	mov	rax, rdx
	test	rax, rax
	jnz	main_L8
	mov	rax, close
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	jmp main_L7
main_L6:
main_L7:
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	sub	rax, rdi
	pop	rdi
	mov	[rdi], rax
main_L5:
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setg	dl
	mov	rax, rdx
	test	rax, rax
	jnz	main_L4
	mov	rax, putch
	push	rax
	mov	rax, 0
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, 0
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

