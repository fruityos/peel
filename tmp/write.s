; this code was generated by a tool. assemble with nasm.
bits 64

global str_is_equal
global fputs
global atoi
global next_arg
global main

str_is_equal:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rsi
	jmp	str_is_equal_L1
str_is_equal_L0:
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	xor	rdx, rdx
	test	rax, rax
	setz	dl
	mov	rax, rdx
	test	rax, rax
	jz	str_is_equal_L2
	mov	rax, 1
	mov	rsp, rbp
	pop	rbp
	ret
	jmp str_is_equal_L3
str_is_equal_L2:
str_is_equal_L3:
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
str_is_equal_L1:
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	sete	dl
	mov	rax, rdx
	test	rax, rax
	jnz	str_is_equal_L0
	mov	rax, 0
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

fputs:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rsi
	push	rax
	jmp	fputs_L1
fputs_L0:
	mov	rax, fputch
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
fputs_L1:
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	test	rax, rax
	jnz	fputs_L0
	mov	rsp, rbp
	pop	rbp
	ret

atoi:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	jmp	atoi_L1
atoi_L0:
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, 10
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	mul	rdi
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	jmp	atoi_L3
atoi_L2:
	db	"0"
	db 0
atoi_L3:
	mov	rax, atoi_L2
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	sub	rax, rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
atoi_L1:
	mov	rax, 255
	push	rax
	jmp	atoi_L5
atoi_L4:
	db	"9"
	db 0
atoi_L5:
	mov	rax, atoi_L4
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setle	dl
	mov	rax, rdx
	push	rax
	mov	rax, 255
	push	rax
	jmp	atoi_L7
atoi_L6:
	db	"0"
	db 0
atoi_L7:
	mov	rax, atoi_L6
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setge	dl
	mov	rax, rdx
	pop	rdi
	xor	rdx, rdx
	test	rax, rax
	setnz	dl
	mov	rax, rdx
	xor	rdx, rdx
	test	rdi, rdi
	setnz	dl
	mov	rdi, rdx
	and	rax, rdi
	test	rax, rax
	jnz	atoi_L0
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

next_arg:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	jmp	next_arg_L1
next_arg_L0:
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
next_arg_L1:
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	test	rax, rax
	jnz	next_arg_L0
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

main:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rsi
	push	rax
	push	rax
	push	rax
	push	rax
	push	rax
	push	rax
	mov	rax, rbp
	mov	rdi, 48
	sub	rax, rdi
	push	rax
	mov	rax, brk
	push	rax
	mov	rax, 1
	neg	rax
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, brk
	push	rax
	mov	rax, 1024
	push	rax
	mov	rax, rbp
	mov	rdi, 48
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, 2
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	sete	dl
	mov	rax, rdx
	test	rax, rax
	jz	main_L0
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	push	rax
	mov	rax, creat
	push	rax
	mov	rax, next_arg
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	jmp main_L1
main_L0:
	mov	rax, fputs
	push	rax
	mov	rax, 1
	push	rax
	jmp	main_L3
main_L2:
	db	"usage: write file"
	db 0
main_L3:
	mov	rax, main_L2
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	mov	rax, putch
	push	rax
	mov	rax, 10
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, exit
	push	rax
	pop	rax
	call	rax
main_L1:
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 48
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, getch
	push	rax
	pop	rax
	call	rax
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	jmp	main_L5
main_L4:
	mov	rax, 10
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	sete	dl
	mov	rax, rdx
	test	rax, rax
	jz	main_L6
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 0
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 48
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	mov	[rdi], rax
	mov	rax, str_is_equal
	push	rax
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	jmp	main_L9
main_L8:
	db	"."
	db 0
main_L9:
	mov	rax, main_L8
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	test	rax, rax
	jz	main_L10
	mov	rax, rbp
	mov	rdi, 64
	sub	rax, rdi
	push	rax
	mov	rax, 1
	pop	rdi
	mov	[rdi], rax
	jmp main_L11
main_L10:
	mov	rax, fputs
	push	rax
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	mov	rax, fputch
	push	rax
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 10
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, getch
	push	rax
	pop	rax
	call	rax
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
main_L11:
	jmp main_L7
main_L6:
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 56
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, getch
	push	rax
	pop	rax
	call	rax
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
main_L7:
main_L5:
	mov	rax, rbp
	mov	rdi, 64
	sub	rax, rdi
	mov	rax, [rax]
	xor	rdx, rdx
	test	rax, rax
	setz	dl
	mov	rax, rdx
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	test	rax, rax
	setnz	dl
	mov	rax, rdx
	xor	rdx, rdx
	test	rdi, rdi
	setnz	dl
	mov	rdi, rdx
	and	rax, rdi
	test	rax, rax
	jnz	main_L4
	mov	rax, close
	push	rax
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, 0
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

