bits 64

global _start

_start:
	pop	rdi
	pop	rsi
	mov	rax, main
	call	rax
	push	rax
	pop	rdi
	mov	rax, exit
	call	rax

; this code was generated by a tool. assemble with nasm.
bits 64

global malloc
global puts
global nextarg
global main

malloc:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, brk
	push	rax
	mov	rax, 1
	neg	rax
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, brk
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

puts:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	jmp	puts_L1
puts_L0:
	mov	rax, putch
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
puts_L1:
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	test	rax, rax
	jnz	puts_L0
	mov	rax, 0
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

nextarg:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rax
	jmp	nextarg_L1
nextarg_L0:
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	pop	rdi
	mov	[rdi], rax
nextarg_L1:
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	pop	rdi
	mov	[rdi], rax
	test	rax, rax
	jnz	nextarg_L0
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	add	rax, rdi
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

main:
	push	rbp
	mov	rbp, rsp
	xor	rax, rax
	push	rdi
	push	rsi
	push	rax
	push	rax
	push	rax
	mov	rax, 2
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setl	dl
	mov	rax, rdx
	test	rax, rax
	jz	main_L0
	mov	rax, puts
	push	rax
	jmp	main_L3
main_L2:
	db	"usage: concat outfile ; infile "
	db 0
main_L3:
	mov	rax, main_L2
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, putch
	push	rax
	mov	rax, 10
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, exit
	push	rax
	pop	rax
	call	rax
	jmp main_L1
main_L0:
main_L1:
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	push	rax
	mov	rax, malloc
	push	rax
	mov	rax, 1
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, nextarg
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	push	rax
	mov	rax, creat
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	jmp	main_L5
main_L4:
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	push	rax
	mov	rax, nextarg
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	push	rax
	mov	rax, open
	push	rax
	mov	rax, rbp
	mov	rdi, 16
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 0
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	mov	[rdi], rax
	mov	rax, 0
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setg	dl
	mov	rax, rdx
	test	rax, rax
	jz	main_L6
	jmp	main_L9
main_L8:
	mov	rax, fputch
	push	rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 255
	push	rax
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	mov	rax, [rax]
	mov	rax, [rax]
	pop	rdi
	and	rax, rdi
	push	rax
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
main_L9:
	mov	rax, 0
	push	rax
	mov	rax, read
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, rbp
	mov	rdi, 40
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	mov	rax, 1
	push	rax
	pop	rdx
	pop	rsi
	pop	rdi
	pop	rax
	call	rax
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setg	dl
	mov	rax, rdx
	test	rax, rax
	jnz	main_L8
	mov	rax, close
	push	rax
	mov	rax, rbp
	mov	rdi, 24
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	jmp main_L7
main_L6:
main_L7:
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	push	rax
	mov	rax, 1
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	sub	rax, rdi
	pop	rdi
	mov	[rdi], rax
main_L5:
	mov	rax, 2
	push	rax
	mov	rax, rbp
	mov	rdi, 8
	sub	rax, rdi
	mov	rax, [rax]
	pop	rdi
	xor	rdx, rdx
	cmp	rax, rdi
	setg	dl
	mov	rax, rdx
	test	rax, rax
	jnz	main_L4
	mov	rax, close
	push	rax
	mov	rax, rbp
	mov	rdi, 32
	sub	rax, rdi
	mov	rax, [rax]
	push	rax
	pop	rdi
	pop	rax
	call	rax
	mov	rax, 0
	mov	rsp, rbp
	pop	rbp
	ret
	mov	rsp, rbp
	pop	rbp
	ret

bits 64

global brk
global close
global creat
global exit
global getch
global fgetch
global open
global putch
global fputch
global read
global seek
global write

brk:
	mov	rax, 12
	syscall
	ret

close:
	mov	rax, 3
	syscall
	ret

creat:
	mov	rax, 85
	mov	rsi, 511
	syscall
	ret

exit:
	mov	rax, 60
	syscall
	hlt

getch:
	xor	rdi, rdi

fgetch:
	push	rax
	push	rsp
	pop	rsi
	mov	rdx, 1
	mov	rax, read
	call	rax
	pop	rdx
	test	rax, rax
	jz	.bail
	push	rdx
	pop	rax
.bail:
	ret

open:
	mov	rax, 2
	syscall
	ret

putch:
	push	rdi
	pop	rsi
	mov	rdi, 1

fputch:
	push	rsi
	push	rsp
	pop	rsi
	mov	rdx, 1
	mov	rax, write
	call	rax
	pop	rax
	ret

read:
	xor	rax, rax
	syscall
	ret

seek:
	mov	rax, 8
	syscall
	ret

write:
	mov	rax, 1
	syscall
	ret

getcwd:
	mov	rax, 79
	syscall
	ret

exec:
	mov	rax, 59
	xor	rdx, rdx
	syscall
	ret

fork:
	mov	rax, 57
	syscall
	ret

waitpid:
	mov	rax, 61
	xor	rsi, rsi
	push	rsi
	pop	rdx
	push	rsi
	pop	r10
	syscall
	ret

chdir:
	mov	rax, 80
	syscall
	ret

getdents64:
	mov	rax, 217
	syscall
	ret

unlink:
	mov	rax, 87
	syscall
	ret

rename:
	mov	rax, 82
	syscall
	ret

mkdir:
	mov	rax, 83
	mov	rsi, 511
	syscall
	ret

rmdir:
	mov	rax, 84
	syscall
	ret

dup2:
	mov	rax, 33
	syscall
	ret
